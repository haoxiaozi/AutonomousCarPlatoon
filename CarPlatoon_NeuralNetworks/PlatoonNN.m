
%  Autonomous Car Platoon
%  Training Neural Network based on 1000 data
%  points. These data points were generated using the Fuzzy Logic
%  implementation for this project.
%  This is synthetic data, so performance of this system must always follow
%  the fuzzy logic implementation.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Vd = 20;
V_ini = 40;
Dd = 10;

Dini_12 = 5;
Dini_23 = 7;

%Array to hold current velocities of the cars.
% Initially all cars start with some uniform initial velocities.
Vn = [V_ini V_ini V_ini];

%Since at start of system, velocities are uniform, Initialize current
%acceleration to be 0
An = [0 0 0];

%Distances maintained between the cars under this vector
Dn = [Dini_12 Dini_23];

% Travelled distances for every car.
% Underlying assumption here is that cars are placed such that:
%    Starting Point | Car3 ---Dini_23-- Car2---Dini_12---Car1-->>
% Car 3 Has travelled zero distance
% Car 2 has travelled Dini_23 distance because it is that distance ahead
% than car 3
% Car 1 has then travelled Dini_12 + Dini_23
% Note that this is travelled distance and is different from Desired
% distances.
Dt = [Dini_12+Dini_23 Dini_23 0]

instances = 11;

i = 1;
Vuni = [V_ini V_ini V_ini];

Vn_m = [V_ini V_ini V_ini];
An_m = [0 0 0];
Dn_m = [Dini_12 Dini_23];
Vd_m = Vd;
Dd_m = Dd;

for t = 1:0.01:instances

    c1 = carPlatoonFISGen('car1', 1, Vd, -1, 2);
    c2 = carPlatoonFISGen('car2', 2, Vd, Dd, 2);
    c3 = carPlatoonFISGen('car3', 3, Vd, Dd, 2);
    
    Dn(1) = Dt(1) - Dt(2);
    Dn(2) = Dt(2) - Dt(3);
    
    % Evaluate the value of acceleration based on the current Velocity of
    % Car 1
    % This Acceleration value is direction coming from Fuzzy Inferencing
    % system c1.
    An(1) = evalfis([Vn(1)], c1);
    
    % Evaluate acceleration for Car 2 by feedback of velocity of the Car 2
    % and Distance between Car 2 and 1.
    % This Acceleration value is direction coming from Fuzzy Inferencing
    % system c2.
    An(2) = evalfis([Dn(1) Vn(2)], c2);
    
    % Evaluate acceleration for Car 3 by feedback of velocity of the Car 3
    % and Distance between Car 3 and 3.
    % This Acceleration value is direction coming from Fuzzy Inferencing
    % system c3.
    An(3) = evalfis([Dn(2) Vn(3)], c3);

    % Calculating distances travelled by every car with new acceleration.
    Dt(1) = Dt(1) + Vn(1)*0.01 + 0.5*An(1)*0.01^2;
    Dt(2) = Dt(2) + Vn(2)*0.01 + 0.5*An(2)*0.01^2;
    Dt(3) = Dt(3) + Vn(3)*0.01 + 0.5*An(3)*0.01^2;
       
    Vn(1) = Vn(1) + An(1)*0.01;
    Vn(2) = Vn(2) + An(2)*0.01;
    Vn(3) = Vn(3) + An(3)*0.01;

    Vn_m = [Vn_m; Vn];
    An_m = [An_m; An];
    Vd_m = [Vd_m; Vd];
    Dn_m = [Dn_m; Dn];
    Dd_m = [Dd_m; Dd];
    
    i = i+1;

end

Input_Mat = [Vn_m' ; Dn_m'; Vd_m'; Dd_m'];
Acceleration = An_m';

featureM = Input_Mat;
[frow, fcol] = size(featureM);
%Data Normalization (Min-Max Approach)
for c = 1:fcol
    min = featureM(1,c);
    max = featureM(1,c);

    for r = 1:frow
        if featureM(r,c)< min
            min = featureM(r,c);
        end
        
        if featureM(r,c) > max
            max = featureM(r,c);
        end
    end
    
    minMatrix(c) = min;
    maxMatrix(c) = max;
    
    for r = 1:frow
        value = featureM(r,c);
        featureM(r,c) = ( value - min )/(max - min);
    end
end

target = Acceleration';

[trow, tcol] = size(target);
%Data Normalization (Min-Max Approach)
for c = 1:tcol
    min = target(1,c);
    max = target(1,c);

    for r = 1:trow
        if target(r,c)< min
            min = target(r,c);
        end
        
        if target(r,c) > max
            max = target(r,c);
        end
    end
    
    minMatrix(c) = min;
    maxMatrix(c) = max;
    
    for r = 1:trow
        value = target(r,c);
        target(r,c) = ( value - min )/(max - min);
    end
end

%Replace first column of Normalized target with 0 Acceleration or
%normalized value 0.5
target(1, :) = [0.5 0.5 0.5];
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 12-Aug-2016 15:02:13
%
% This script assumes these variables are defined:
%
%   Input_Mat - input data.
%   Acceleration - target data.

x = featureM;
t = target';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 7;
net = fitnet(hiddenLayerSize,trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivide
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotregression', 'plotfit'};

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y)
valPerformance = perform(net,valTargets,y)
testPerformance = perform(net,testTargets,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (false)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'myNeuralNetworkFunction');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net);
end